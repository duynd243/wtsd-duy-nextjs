/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation CREATE_COMMENT (\n    $commentOn: Int!\n    $content: String!\n    $author: String!\n    $authorUrl: String!\n    $authorEmail: String!\n  ) {\n    createComment(\n      input: {\n        commentOn: $commentOn\n        content: $content\n        author: $author\n        authorUrl: $authorUrl\n        authorEmail: $authorEmail\n      }\n    ) {\n      success\n      comment {\n        id\n        content\n        author {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.Create_CommentDocument,
    "fragment BreadcrumbFragment on Page_Pagebuilder_DynamicBlocks_Breadcrumb {\n  title\n  links {\n    link {\n      title\n      target\n      url\n    }\n  }\n  backgroundImage {\n    sourceUrl\n    altText\n  }\n}": types.BreadcrumbFragmentFragmentDoc,
    "fragment CategoriesFragment on RootQuery {\n  categories {\n    nodes {\n      id\n      name\n    }\n  }\n}": types.CategoriesFragmentFragmentDoc,
    "fragment CoreImageFragment on CoreImage {\n  attributes {\n    href\n    className\n    src\n    url\n    alt\n  }\n}": types.CoreImageFragmentFragmentDoc,
    "fragment CoreParagraphFragment on CoreParagraph {\n  attributes {\n    content\n    align\n  }\n}": types.CoreParagraphFragmentFragmentDoc,
    "fragment FeaturedItemsFragment on Page_Pagebuilderfrontpage_DynamicBlocks_FeaturedItems {\n  heading\n  description\n  featuredItemCard {\n    heading\n    description\n    image {\n      sizes\n      altText\n      sourceUrl\n    }\n  }\n}": types.FeaturedItemsFragmentFragmentDoc,
    "fragment HeroFrontPageFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Hero {\n  title\n  description\n  image {\n    altText\n    sourceUrl\n  }\n}": types.HeroFrontPageFragmentFragmentDoc,
    "fragment MostRecentPostsFragment on RootQuery {\n  posts(first: $numberOfPosts, where: {orderby: {field: DATE, order: DESC}}) {\n    nodes {\n      databaseId\n      title\n      date\n      slug\n      categories {\n        nodes {\n          name\n        }\n      }\n      featuredImage {\n        node {\n          sizes\n          altText\n          id\n          sourceUrl\n        }\n      }\n      editorBlocks(flat: false) {\n        ...PostEditorBlockFragment\n        ...CoreParagraphFragment\n      }\n    }\n  }\n}": types.MostRecentPostsFragmentFragmentDoc,
    "fragment NewsLetterFrontPageFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Subscribenewsletter {\n  heading\n  description\n  background {\n    altText\n    sourceUrl\n  }\n}\n\nfragment NewsLetterFragment on Page_Pagebuilder_DynamicBlocks_SubscribeNewsLetter {\n  heading\n  description\n  background {\n    altText\n    sourceUrl\n  }\n}": types.NewsLetterFrontPageFragmentFragmentDoc,
    "fragment PartnersFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Partners {\n  heading\n  description\n  branchLogos {\n    logo {\n      altText\n      sourceUrl\n    }\n  }\n}": types.PartnersFragmentFragmentDoc,
    "fragment PostEditorBlockFragment on PostEditorBlock {\n  __typename\n  apiVersion\n  renderedHtml\n  id: clientId\n  parentClientId\n  isDynamic\n  name\n  cssClassNames\n}": types.PostEditorBlockFragmentFragmentDoc,
    "fragment TestimonialFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Testimonial {\n  sectionTitle\n  heading\n  description\n  card {\n    avatar {\n      altText\n      sourceUrl\n    }\n    reviewer\n    reviewerTitle\n    ratingScore\n    comment\n  }\n}": types.TestimonialFragmentFragmentDoc,
    "fragment WhyChooseUsFragment on Page_Pagebuilderfrontpage_DynamicBlocks_WhyChooseUs {\n  heading\n  description\n  background {\n    altText\n    sourceUrl\n  }\n  card {\n    heading\n    description\n    icon {\n      altText\n      sourceUrl\n    }\n    url\n  }\n}": types.WhyChooseUsFragmentFragmentDoc,
    "fragment HeaderLinkFragment on AcfOptionsHeader_Headermenuitems_Menu_SingleLink {\n  singleLink {\n    target\n    title\n    url\n  }\n}\n\nfragment HeaderLinkGroupFragment on AcfOptionsHeader_Headermenuitems_Menu_LinkGroup {\n  groupName\n  links {\n    link {\n      target\n      title\n      url\n    }\n  }\n}\n\nquery GetGlobalData {\n  acfOptionsHeader {\n    headerMenuItems {\n      menu {\n        __typename\n        ...HeaderLinkFragment\n        ...HeaderLinkGroupFragment\n      }\n    }\n  }\n  siteSettings {\n    siteInformation {\n      siteName\n      siteLogo {\n        altText\n        sourceUrl\n      }\n      siteDescription\n      copyrightText\n    }\n    contactInformation {\n      contactInformationHeading\n      contactItems {\n        icon {\n          altText\n          sourceUrl\n        }\n        text\n        url\n      }\n    }\n    subscribeNewsLetter {\n      heading\n      description\n      background {\n        altText\n        sizes\n        sourceUrl\n      }\n    }\n  }\n  acfOptionsFooter {\n    quickLinks {\n      quickLinksHeading\n      links {\n        link {\n          title\n          url\n          target\n        }\n      }\n    }\n    socialLinks {\n      socialLinks {\n        icon {\n          altText\n          sourceUrl\n        }\n        link {\n          target\n          title\n          url\n        }\n      }\n    }\n  }\n}": types.HeaderLinkFragmentFragmentDoc,
    "\n  query GetHomePage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      pageBuilderFrontPage {\n        dynamicBlocks {\n          __typename\n          ...HeroFrontPageFragment\n          ...FeaturedItemsFragment\n          ...WhyChooseUsFragment\n          ...PartnersFragment\n          ...TestimonialFragment\n          ...NewsLetterFrontPageFragment\n        }\n      }\n    }\n  }\n": types.GetHomePageDocument,
    "\n  query GetBlogsPage(\n    $databaseId: ID!\n    $asPreview: Boolean = false\n    $numberOfPosts: Int\n  ) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      pageBuilder {\n        dynamicBlocks {\n          __typename\n          ...BreadcrumbFragment\n        }\n      }\n    }\n    ...MostRecentPostsFragment\n  }\n": types.GetBlogsPageDocument,
    "\n  query GetPageContact($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      pageBuilder {\n        dynamicBlocks {\n          __typename\n          ...BreadcrumbFragment\n        }\n      }\n    }\n  }\n": types.GetPageContactDocument,
    "\n  query GetPost(\n    $databaseId: ID!\n    $asPreview: Boolean = false\n    $numberOfPosts: Int\n  ) {\n    ...MostRecentPostsFragment\n    ...CategoriesFragment\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      databaseId\n      title\n      date\n      author {\n        node {\n          name\n          firstName\n          lastName\n        }\n      }\n      categories {\n        nodes {\n          id\n          name\n        }\n      }\n      tags {\n        nodes {\n          id\n          name\n        }\n      }\n      featuredImage {\n        node {\n          id\n          sourceUrl\n        }\n      }\n      comments {\n        nodes {\n          id\n          status\n          date\n          author {\n            node {\n              avatar {\n                url\n              }\n              url\n              email\n              name\n              id\n            }\n          }\n          content(format: RENDERED)\n        }\n      }\n      editorBlocks(flat: false) {\n        ...PostEditorBlockFragment\n        ...CoreParagraphFragment\n        ...CoreImageFragment\n      }\n    }\n  }\n": types.GetPostDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CREATE_COMMENT (\n    $commentOn: Int!\n    $content: String!\n    $author: String!\n    $authorUrl: String!\n    $authorEmail: String!\n  ) {\n    createComment(\n      input: {\n        commentOn: $commentOn\n        content: $content\n        author: $author\n        authorUrl: $authorUrl\n        authorEmail: $authorEmail\n      }\n    ) {\n      success\n      comment {\n        id\n        content\n        author {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CREATE_COMMENT (\n    $commentOn: Int!\n    $content: String!\n    $author: String!\n    $authorUrl: String!\n    $authorEmail: String!\n  ) {\n    createComment(\n      input: {\n        commentOn: $commentOn\n        content: $content\n        author: $author\n        authorUrl: $authorUrl\n        authorEmail: $authorEmail\n      }\n    ) {\n      success\n      comment {\n        id\n        content\n        author {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment BreadcrumbFragment on Page_Pagebuilder_DynamicBlocks_Breadcrumb {\n  title\n  links {\n    link {\n      title\n      target\n      url\n    }\n  }\n  backgroundImage {\n    sourceUrl\n    altText\n  }\n}"): (typeof documents)["fragment BreadcrumbFragment on Page_Pagebuilder_DynamicBlocks_Breadcrumb {\n  title\n  links {\n    link {\n      title\n      target\n      url\n    }\n  }\n  backgroundImage {\n    sourceUrl\n    altText\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CategoriesFragment on RootQuery {\n  categories {\n    nodes {\n      id\n      name\n    }\n  }\n}"): (typeof documents)["fragment CategoriesFragment on RootQuery {\n  categories {\n    nodes {\n      id\n      name\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CoreImageFragment on CoreImage {\n  attributes {\n    href\n    className\n    src\n    url\n    alt\n  }\n}"): (typeof documents)["fragment CoreImageFragment on CoreImage {\n  attributes {\n    href\n    className\n    src\n    url\n    alt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CoreParagraphFragment on CoreParagraph {\n  attributes {\n    content\n    align\n  }\n}"): (typeof documents)["fragment CoreParagraphFragment on CoreParagraph {\n  attributes {\n    content\n    align\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment FeaturedItemsFragment on Page_Pagebuilderfrontpage_DynamicBlocks_FeaturedItems {\n  heading\n  description\n  featuredItemCard {\n    heading\n    description\n    image {\n      sizes\n      altText\n      sourceUrl\n    }\n  }\n}"): (typeof documents)["fragment FeaturedItemsFragment on Page_Pagebuilderfrontpage_DynamicBlocks_FeaturedItems {\n  heading\n  description\n  featuredItemCard {\n    heading\n    description\n    image {\n      sizes\n      altText\n      sourceUrl\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment HeroFrontPageFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Hero {\n  title\n  description\n  image {\n    altText\n    sourceUrl\n  }\n}"): (typeof documents)["fragment HeroFrontPageFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Hero {\n  title\n  description\n  image {\n    altText\n    sourceUrl\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment MostRecentPostsFragment on RootQuery {\n  posts(first: $numberOfPosts, where: {orderby: {field: DATE, order: DESC}}) {\n    nodes {\n      databaseId\n      title\n      date\n      slug\n      categories {\n        nodes {\n          name\n        }\n      }\n      featuredImage {\n        node {\n          sizes\n          altText\n          id\n          sourceUrl\n        }\n      }\n      editorBlocks(flat: false) {\n        ...PostEditorBlockFragment\n        ...CoreParagraphFragment\n      }\n    }\n  }\n}"): (typeof documents)["fragment MostRecentPostsFragment on RootQuery {\n  posts(first: $numberOfPosts, where: {orderby: {field: DATE, order: DESC}}) {\n    nodes {\n      databaseId\n      title\n      date\n      slug\n      categories {\n        nodes {\n          name\n        }\n      }\n      featuredImage {\n        node {\n          sizes\n          altText\n          id\n          sourceUrl\n        }\n      }\n      editorBlocks(flat: false) {\n        ...PostEditorBlockFragment\n        ...CoreParagraphFragment\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment NewsLetterFrontPageFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Subscribenewsletter {\n  heading\n  description\n  background {\n    altText\n    sourceUrl\n  }\n}\n\nfragment NewsLetterFragment on Page_Pagebuilder_DynamicBlocks_SubscribeNewsLetter {\n  heading\n  description\n  background {\n    altText\n    sourceUrl\n  }\n}"): (typeof documents)["fragment NewsLetterFrontPageFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Subscribenewsletter {\n  heading\n  description\n  background {\n    altText\n    sourceUrl\n  }\n}\n\nfragment NewsLetterFragment on Page_Pagebuilder_DynamicBlocks_SubscribeNewsLetter {\n  heading\n  description\n  background {\n    altText\n    sourceUrl\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PartnersFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Partners {\n  heading\n  description\n  branchLogos {\n    logo {\n      altText\n      sourceUrl\n    }\n  }\n}"): (typeof documents)["fragment PartnersFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Partners {\n  heading\n  description\n  branchLogos {\n    logo {\n      altText\n      sourceUrl\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PostEditorBlockFragment on PostEditorBlock {\n  __typename\n  apiVersion\n  renderedHtml\n  id: clientId\n  parentClientId\n  isDynamic\n  name\n  cssClassNames\n}"): (typeof documents)["fragment PostEditorBlockFragment on PostEditorBlock {\n  __typename\n  apiVersion\n  renderedHtml\n  id: clientId\n  parentClientId\n  isDynamic\n  name\n  cssClassNames\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment TestimonialFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Testimonial {\n  sectionTitle\n  heading\n  description\n  card {\n    avatar {\n      altText\n      sourceUrl\n    }\n    reviewer\n    reviewerTitle\n    ratingScore\n    comment\n  }\n}"): (typeof documents)["fragment TestimonialFragment on Page_Pagebuilderfrontpage_DynamicBlocks_Testimonial {\n  sectionTitle\n  heading\n  description\n  card {\n    avatar {\n      altText\n      sourceUrl\n    }\n    reviewer\n    reviewerTitle\n    ratingScore\n    comment\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment WhyChooseUsFragment on Page_Pagebuilderfrontpage_DynamicBlocks_WhyChooseUs {\n  heading\n  description\n  background {\n    altText\n    sourceUrl\n  }\n  card {\n    heading\n    description\n    icon {\n      altText\n      sourceUrl\n    }\n    url\n  }\n}"): (typeof documents)["fragment WhyChooseUsFragment on Page_Pagebuilderfrontpage_DynamicBlocks_WhyChooseUs {\n  heading\n  description\n  background {\n    altText\n    sourceUrl\n  }\n  card {\n    heading\n    description\n    icon {\n      altText\n      sourceUrl\n    }\n    url\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment HeaderLinkFragment on AcfOptionsHeader_Headermenuitems_Menu_SingleLink {\n  singleLink {\n    target\n    title\n    url\n  }\n}\n\nfragment HeaderLinkGroupFragment on AcfOptionsHeader_Headermenuitems_Menu_LinkGroup {\n  groupName\n  links {\n    link {\n      target\n      title\n      url\n    }\n  }\n}\n\nquery GetGlobalData {\n  acfOptionsHeader {\n    headerMenuItems {\n      menu {\n        __typename\n        ...HeaderLinkFragment\n        ...HeaderLinkGroupFragment\n      }\n    }\n  }\n  siteSettings {\n    siteInformation {\n      siteName\n      siteLogo {\n        altText\n        sourceUrl\n      }\n      siteDescription\n      copyrightText\n    }\n    contactInformation {\n      contactInformationHeading\n      contactItems {\n        icon {\n          altText\n          sourceUrl\n        }\n        text\n        url\n      }\n    }\n    subscribeNewsLetter {\n      heading\n      description\n      background {\n        altText\n        sizes\n        sourceUrl\n      }\n    }\n  }\n  acfOptionsFooter {\n    quickLinks {\n      quickLinksHeading\n      links {\n        link {\n          title\n          url\n          target\n        }\n      }\n    }\n    socialLinks {\n      socialLinks {\n        icon {\n          altText\n          sourceUrl\n        }\n        link {\n          target\n          title\n          url\n        }\n      }\n    }\n  }\n}"): (typeof documents)["fragment HeaderLinkFragment on AcfOptionsHeader_Headermenuitems_Menu_SingleLink {\n  singleLink {\n    target\n    title\n    url\n  }\n}\n\nfragment HeaderLinkGroupFragment on AcfOptionsHeader_Headermenuitems_Menu_LinkGroup {\n  groupName\n  links {\n    link {\n      target\n      title\n      url\n    }\n  }\n}\n\nquery GetGlobalData {\n  acfOptionsHeader {\n    headerMenuItems {\n      menu {\n        __typename\n        ...HeaderLinkFragment\n        ...HeaderLinkGroupFragment\n      }\n    }\n  }\n  siteSettings {\n    siteInformation {\n      siteName\n      siteLogo {\n        altText\n        sourceUrl\n      }\n      siteDescription\n      copyrightText\n    }\n    contactInformation {\n      contactInformationHeading\n      contactItems {\n        icon {\n          altText\n          sourceUrl\n        }\n        text\n        url\n      }\n    }\n    subscribeNewsLetter {\n      heading\n      description\n      background {\n        altText\n        sizes\n        sourceUrl\n      }\n    }\n  }\n  acfOptionsFooter {\n    quickLinks {\n      quickLinksHeading\n      links {\n        link {\n          title\n          url\n          target\n        }\n      }\n    }\n    socialLinks {\n      socialLinks {\n        icon {\n          altText\n          sourceUrl\n        }\n        link {\n          target\n          title\n          url\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetHomePage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      pageBuilderFrontPage {\n        dynamicBlocks {\n          __typename\n          ...HeroFrontPageFragment\n          ...FeaturedItemsFragment\n          ...WhyChooseUsFragment\n          ...PartnersFragment\n          ...TestimonialFragment\n          ...NewsLetterFrontPageFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHomePage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      pageBuilderFrontPage {\n        dynamicBlocks {\n          __typename\n          ...HeroFrontPageFragment\n          ...FeaturedItemsFragment\n          ...WhyChooseUsFragment\n          ...PartnersFragment\n          ...TestimonialFragment\n          ...NewsLetterFrontPageFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetBlogsPage(\n    $databaseId: ID!\n    $asPreview: Boolean = false\n    $numberOfPosts: Int\n  ) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      pageBuilder {\n        dynamicBlocks {\n          __typename\n          ...BreadcrumbFragment\n        }\n      }\n    }\n    ...MostRecentPostsFragment\n  }\n"): (typeof documents)["\n  query GetBlogsPage(\n    $databaseId: ID!\n    $asPreview: Boolean = false\n    $numberOfPosts: Int\n  ) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      pageBuilder {\n        dynamicBlocks {\n          __typename\n          ...BreadcrumbFragment\n        }\n      }\n    }\n    ...MostRecentPostsFragment\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPageContact($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      pageBuilder {\n        dynamicBlocks {\n          __typename\n          ...BreadcrumbFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPageContact($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      pageBuilder {\n        dynamicBlocks {\n          __typename\n          ...BreadcrumbFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPost(\n    $databaseId: ID!\n    $asPreview: Boolean = false\n    $numberOfPosts: Int\n  ) {\n    ...MostRecentPostsFragment\n    ...CategoriesFragment\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      databaseId\n      title\n      date\n      author {\n        node {\n          name\n          firstName\n          lastName\n        }\n      }\n      categories {\n        nodes {\n          id\n          name\n        }\n      }\n      tags {\n        nodes {\n          id\n          name\n        }\n      }\n      featuredImage {\n        node {\n          id\n          sourceUrl\n        }\n      }\n      comments {\n        nodes {\n          id\n          status\n          date\n          author {\n            node {\n              avatar {\n                url\n              }\n              url\n              email\n              name\n              id\n            }\n          }\n          content(format: RENDERED)\n        }\n      }\n      editorBlocks(flat: false) {\n        ...PostEditorBlockFragment\n        ...CoreParagraphFragment\n        ...CoreImageFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPost(\n    $databaseId: ID!\n    $asPreview: Boolean = false\n    $numberOfPosts: Int\n  ) {\n    ...MostRecentPostsFragment\n    ...CategoriesFragment\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      databaseId\n      title\n      date\n      author {\n        node {\n          name\n          firstName\n          lastName\n        }\n      }\n      categories {\n        nodes {\n          id\n          name\n        }\n      }\n      tags {\n        nodes {\n          id\n          name\n        }\n      }\n      featuredImage {\n        node {\n          id\n          sourceUrl\n        }\n      }\n      comments {\n        nodes {\n          id\n          status\n          date\n          author {\n            node {\n              avatar {\n                url\n              }\n              url\n              email\n              name\n              id\n            }\n          }\n          content(format: RENDERED)\n        }\n      }\n      editorBlocks(flat: false) {\n        ...PostEditorBlockFragment\n        ...CoreParagraphFragment\n        ...CoreImageFragment\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;